#!/usr/bin/env python3

import argparse
import configparser
from pathlib import Path
from botocore.exceptions import ProfileNotFound

import boto3

PERSISTENT_PERSONAL_PROFILE_NAME = "personal"
SESSION_PROFILE_NAME = "default"

AWS_CONFIG_PATH = Path.home() / ".aws" / "credentials"


def generate_session_token(mfa_device: str, token_code: str):
    try:
        session = boto3.Session(profile_name=PERSISTENT_PERSONAL_PROFILE_NAME)
    except ProfileNotFound:
        print(
            f"Profile '{PERSISTENT_PERSONAL_PROFILE_NAME}' not found. Please create it first with your user's credentials. "
            "See https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html for more details."
        )
        return

    sts_client = session.client("sts")

    response = sts_client.get_caller_identity()
    account_id = response["Account"]
    serial_number = f"arn:aws:iam::{account_id}:mfa/{mfa_device}"

    response = sts_client.get_session_token(
        SerialNumber=serial_number,
        TokenCode=token_code,
    )

    access_key = response["Credentials"]["AccessKeyId"]
    secret_key = response["Credentials"]["SecretAccessKey"]
    session_token = response["Credentials"]["SessionToken"]

    config = configparser.ConfigParser()
    config.read(AWS_CONFIG_PATH)
    if SESSION_PROFILE_NAME not in config.sections():
        config.add_section(SESSION_PROFILE_NAME)

    config.set(SESSION_PROFILE_NAME, "aws_access_key_id", access_key)
    config.set(SESSION_PROFILE_NAME, "aws_secret_access_key", secret_key)
    config.set(SESSION_PROFILE_NAME, "aws_session_token", session_token)

    with AWS_CONFIG_PATH.open("w") as configfile:
        config.write(configfile)

    print(f"Session token generated and stored in profile: {SESSION_PROFILE_NAME}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Generate AWS session token from the 'personal' profile and store it in 'default' AWS profile."
    )
    parser.add_argument(
        "mfa_device", type=str, help="Identification key of the MFA device"
    )
    parser.add_argument(
        "token_code", type=str, help="One-time password generated by the MFA device"
    )
    args = parser.parse_args()
    generate_session_token(args.mfa_device, args.token_code)
